{"version":3,"sources":["Components/navbar/navbar.module.css","Components/header/header.module.css","Api/index.js","Components/navbar/index.jsx","Components/header/index.jsx","Pages/Home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","url","fetchData","country","a","changeUrl","console","log","axios","get","data","cases","recovered","deaths","todayCases","todayDeaths","affectedCountries","updated","fetchDataContact","process","contact","setting","SectionNavbar","props","Fragment","Navbar","bg","expand","Container","Brand","href","className","styles","brand","Image","src","logo","alt","width","height","Toggle","aria-controls","Collapse","id","Nav","cx","navitem","NavItem","eventkey","Link","as","to","SectionHeader","valueCases","valueRecover","valueDeaths","header","Row","Col","lg","orderImglg","imageHeader","headerInfo","heading","headingSmall","covid","descriptHeader","bntStatistic","btnNews","casesWorld","sm","titleCases","numberCases","start","end","duration","separator","lastupdate","Date","toUTCString","Home","App","useState","blog","faq","websiteInfo","countrie","state","setState","useEffect","then","dataAllWords","p","apply","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0866f7e6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brand\":\"navbar_brand__20U1x\",\"navitem\":\"navbar_navitem__2em0O\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"header_header__2T-UY\",\"orderImglg\":\"header_orderImglg__2E34Y\",\"imageHeader\":\"header_imageHeader__1oY17\",\"heading\":\"header_heading__2mDC5\",\"headingSmall\":\"header_headingSmall__3Krq1\",\"covid\":\"header_covid__2JvIc\",\"descriptHeader\":\"header_descriptHeader__3ni8R\",\"bntStatistic\":\"header_bntStatistic__1RscK\",\"btnNews\":\"header_btnNews__3iu-z\",\"casesWorld\":\"header_casesWorld__1R5fx\",\"titleCases\":\"header_titleCases__1dgjR\",\"lastupdate\":\"header_lastupdate__1o4_v\",\"numberCases\":\"header_numberCases__2dcyS\"};","import axios from 'axios';\r\n\r\nconst url = 'https://corona.lmao.ninja/v2';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeUrl;\r\n\r\n    if(country) {\r\n        changeUrl = `${url}/countries/${country}`;\r\n    }else {\r\n        changeUrl = `${url}/all`;\r\n    }\r\n\r\n    console.log(changeUrl);\r\n    try {\r\n        const {data : {cases, recovered, deaths, todayCases, todayDeaths, affectedCountries, updated}} = await axios.get(changeUrl);\r\n        return {cases, recovered, deaths, todayCases, todayDeaths, affectedCountries, updated};\r\n        /* \r\n            or you can write this way\r\n            const modifiedData = {confirmed : confirmed, ....}\r\n        */\r\n    } catch (error) {\r\n        console.log(error, 'Error in fetch Data Static Cases All Worlds')\r\n    }\r\n}\r\n\r\nexport const fetchDataBlog = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const blog = await axios.get(url);            \r\n            return blog.data.blog;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Blog News');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Blog');\r\n    }\r\n    \r\n}\r\n\r\nexport const fetchDataQuetions = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const faq = await axios.get(url);\r\n            return faq.data.faq;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Faq\"s Questions');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Reponse Questions');\r\n    }\r\n}\r\n\r\nexport const fetchDataContact = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const contact = await axios.get(url);\r\n            return contact.data.setting;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Contact');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Contact');\r\n    }\r\n}\r\n\r\nexport const fetchDataLinkWebsite = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const websiteInfo = await axios.get(url);\r\n            return websiteInfo.data.WebsiteInfo;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Contact');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Contact');\r\n    }\r\n}","import React from 'react';\r\nimport cx from 'classnames';\r\nimport {Navbar, Nav, NavItem, Image, Container} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport styles from './navbar.module.css';\r\n\r\n\r\nfunction SectionNavbar(props) {      \r\n    return (\r\n        <React.Fragment>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/\" className={styles.brand}>\r\n                        <Image src={process.env.PUBLIC_URL + props.logo} alt='Covid_19' width='200px' height='60px' />\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className={cx(styles.navitem, \"ml-auto\")}>\r\n                            <NavItem eventkey={1} href=\"/\">\r\n                                <Nav.Link as={Link} to=\"/\" >Home</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={2} href=\"/about\">\r\n                                <Nav.Link as={Link} to=\"/about\" >About</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={3} href=\"/symptons\">\r\n                                <Nav.Link as={Link} to=\"/symptons\" >Symptons</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={4} href=\"/treatment\">\r\n                                <Nav.Link as={Link} to=\"/treatment\" >Treatment</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={5} href=\"/statistic\">\r\n                                <Nav.Link as={Link} to=\"/statistic\" >Statistic</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={6} href=\"/contact\">\r\n                                <Nav.Link as={Link} to=\"/contact\" >Contact</Nav.Link>\r\n                            </NavItem>\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SectionNavbar;","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport CountUp from 'react-countup';\r\n\r\nimport styles from './header.module.css';\r\n\r\nfunction SectionHeader({data : {cases, recovered, deaths, updated}}) {\r\n    \r\n    let valueCases = 0,\r\n        valueRecover = 0,\r\n        valueDeaths = 0;\r\n    \r\n    if(!cases && !recovered && !deaths) {\r\n        return 'loading...';\r\n    }else {\r\n        valueCases = cases;\r\n        valueRecover = recovered;\r\n        valueDeaths = deaths;\r\n    }\r\n\r\n    return (\r\n        <div className={styles.header}>\r\n            <Container>\r\n                <Row>\r\n                    <Col lg='5' className={styles.orderImglg}>\r\n                        <div className={styles.imageHeader}>\r\n                            <img src={process.env.PUBLIC_URL + '/images/header_covid19.png'} alt='covid-19'/>\r\n                        </div>\r\n                    </Col>\r\n                    <Col lg='6' className={styles.headerInfo}>\r\n                        <h1 className={styles.heading}>\r\n                            <span>CORONA</span>\r\n                            <span className={styles.headingSmall}>\r\n                                <span className={styles.covid}>COVID-19</span>\r\n                                <span>LIVE UPDATE</span>\r\n                            </span>\r\n                        </h1>\r\n                        <p className={styles.descriptHeader}>\r\n                        The Coronavirus (COVID-19) was first reported in Wuhan, Hubei, China in December 2019,\r\n                        the outbreak was later recognized as a pandemic by the W.H.O on 11 March 2020.\r\n                        </p>\r\n                        <button className={styles.bntStatistic}>Statistic Covid-19</button>\r\n                        <button className={styles.btnNews}><span>News WHO</span></button> \r\n                        <div className={styles.casesWorld}>\r\n                            <Row>\r\n                                <Col sm='4'>\r\n                                    <h6 className={styles.titleCases}>INFECTED CASES</h6>\r\n                                    <h3 className={styles.numberCases}>\r\n                                        <CountUp start={0} end={valueCases} duration={3} separator=',' />\r\n                                    </h3>\r\n                                </Col>\r\n                                <Col sm='4'>\r\n                                    <h6 className={styles.titleCases}>DEATHS</h6>\r\n                                    <h3 className={styles.numberCases}>\r\n                                        <CountUp start={0} end={valueDeaths} duration={3} separator=',' />\r\n                                    </h3>\r\n                                </Col>\r\n                                <Col sm='4'>\r\n                                    <h6 className={styles.titleCases}>RECOVERED</h6>\r\n                                    <h3 className={styles.numberCases}>\r\n                                        <CountUp start={0} end={valueRecover} duration={3} separator=',' />\r\n                                    </h3>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                    <p className={styles.lastupdate}>Last updated: {new Date(updated).toUTCString()}</p>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SectionHeader;","import React from 'react';\r\n\r\n//Import All Components Section Page Home\r\nimport Header from '../../Components/header';\r\n\r\n\r\nfunction Home(props) {  \r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <Header data = {props.data} />\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Home;","import React, {useState, useEffect} from 'react';\nimport {BrowserRouter, Route} from 'react-router-dom';\nimport {fetchDataContact, fetchData} from './Api';\n\nimport './App.css';\n\n//Import Components Fixed Website\nimport Navbar from './Components/navbar/';\n\n//Import All Pages\nimport Home from './Pages/Home/';\n\nfunction App() {\n\n  const [state, setState] = useState({\n    data: {},\n    country: [],\n    blog: [],\n    faq: [],\n    setting: {},\n    websiteInfo: [],\n    countrie: '',\n  })\n\n  useEffect(() => {\n\n    fetchData().then(dataAllWords => {\n      setState(p => {\n        return {...p,data: dataAllWords}\n      })  \n    });\n\n    fetchDataContact.apply().then(contact => {\n      setState(p => {\n        return {...p, setting: contact}\n      })\n    });\n\n}, []);\n\n  return (\n    <BrowserRouter>\n      <Navbar logo={state.setting.logo}/>\n      <Route exact path='/' render={() => \n        <Home data = {state.data} />}  \n      />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}