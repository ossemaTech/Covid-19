{"version":3,"sources":["Components/navbar/navbar.module.css","Api/index.js","Components/navbar/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","fetchDataContact","a","url","process","axios","get","contact","data","setting","console","log","SectionNavbar","props","Fragment","Navbar","bg","expand","Container","Brand","href","className","styles","brand","Image","src","logo","alt","width","height","Toggle","aria-controls","Collapse","id","Nav","cx","navitem","NavItem","eventkey","Link","as","to","App","useState","country","blog","faq","websiteInfo","countrie","state","setState","useEffect","apply","then","p","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,MAAQ,sBAAsB,QAAU,0B,kOCkC7CC,EAAgB,uCAAG,8BAAAC,EAAA,6DACtBC,EAAMC,0BADgB,kBAKEC,IAAMC,IAAIH,GALZ,cAKdI,EALc,yBAMbA,EAAQC,KAAKC,SANA,gCAQpBC,QAAQC,IAAR,KAAmB,+BARC,gCAWxBD,QAAQC,IAAI,iCAXY,yDAAH,qD,iFCWdC,MAtCf,SAAuBC,GACnB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MACtB,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,IAAIC,UAAWC,IAAOC,OACrC,kBAACC,EAAA,EAAD,CAAOC,IAAKrB,WAAyBS,EAAMa,KAAMC,IAAI,WAAWC,MAAM,QAAQC,OAAO,UAEzF,kBAACd,EAAA,EAAOe,OAAR,CAAeC,gBAAc,qBAC7B,kBAAChB,EAAA,EAAOiB,SAAR,CAAiBC,GAAG,oBAChB,kBAACC,EAAA,EAAD,CAAKb,UAAWc,IAAGb,IAAOc,QAAS,YAC/B,kBAACC,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,KACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,KAAvB,SAEJ,kBAACJ,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,UACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,UAAvB,UAEJ,kBAACJ,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,aACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,aAAvB,aAEJ,kBAACJ,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,cACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,cAAvB,cAEJ,kBAACJ,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,cACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,cAAvB,cAEJ,kBAACJ,EAAA,EAAD,CAASC,SAAU,EAAGlB,KAAK,YACvB,kBAACc,EAAA,EAAIK,KAAL,CAAUC,GAAID,IAAME,GAAG,YAAvB,kBCGjBC,MA7Bf,WAAgB,IAAD,EAEaC,mBAAS,CACjCnC,KAAM,GACNoC,QAAS,GACTC,KAAM,GACNC,IAAK,GACLrC,QAAS,GACTsC,YAAa,GACbC,SAAU,KATC,mBAENC,EAFM,KAECC,EAFD,KAsBb,OAVAC,qBAAU,WAERlD,EAAiBmD,QAAQC,MAAK,SAAA9C,GAC5B2C,GAAS,SAAAI,GACP,OAAO,2BAAIA,GAAX,IAAc7C,QAASF,YAI5B,IAGC,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAQmB,KAAMuB,EAAMxC,QAAQiB,SCrBd6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBd,MAAK,SAAAe,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7D,QAAQ6D,MAAMA,EAAMC,c","file":"static/js/main.ed61f19d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brand\":\"navbar_brand__20U1x\",\"navitem\":\"navbar_navitem__2em0O\"};","import axios from 'axios';\r\n\r\nconst url = 'https://corona.lmao.ninja/v2';\r\n\r\nexport const fetchDataBlog = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const blog = await axios.get(url);            \r\n            return blog.data.blog;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Blog News');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Blog');\r\n    }\r\n    \r\n}\r\n\r\nexport const fetchDataQuetions = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const faq = await axios.get(url);\r\n            return faq.data.faq;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Faq\"s Questions');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Reponse Questions');\r\n    }\r\n}\r\n\r\nexport const fetchDataContact = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const contact = await axios.get(url);\r\n            return contact.data.setting;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Contact');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Contact');\r\n    }\r\n}\r\n\r\nexport const fetchDataLinkWebsite = async () => {\r\n    const url = process.env.PUBLIC_URL + '/JSON/data.json';\r\n\r\n    if(url) {\r\n        try {\r\n            const websiteInfo = await axios.get(url);\r\n            return websiteInfo.data.WebsiteInfo;\r\n        } catch (error) {\r\n            console.log(error, 'Error in Fetch Data Contact');\r\n        }\r\n    }else {\r\n        console.log('Error in URL Get Data Contact');\r\n    }\r\n}","import React from 'react';\r\nimport cx from 'classnames';\r\nimport {Navbar, Nav, NavItem, Image, Container} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport styles from './navbar.module.css';\r\n\r\n\r\nfunction SectionNavbar(props) {      \r\n    return (\r\n        <React.Fragment>\r\n            <Navbar bg=\"light\" expand=\"lg\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"/\" className={styles.brand}>\r\n                        <Image src={process.env.PUBLIC_URL + props.logo} alt='Covid_19' width='200px' height='60px' />\r\n                    </Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className={cx(styles.navitem, \"ml-auto\")}>\r\n                            <NavItem eventkey={1} href=\"/\">\r\n                                <Nav.Link as={Link} to=\"/\" >Home</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={2} href=\"/about\">\r\n                                <Nav.Link as={Link} to=\"/about\" >About</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={3} href=\"/symptons\">\r\n                                <Nav.Link as={Link} to=\"/symptons\" >Symptons</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={4} href=\"/treatment\">\r\n                                <Nav.Link as={Link} to=\"/treatment\" >Treatment</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={5} href=\"/statistic\">\r\n                                <Nav.Link as={Link} to=\"/statistic\" >Statistic</Nav.Link>\r\n                            </NavItem>\r\n                            <NavItem eventkey={6} href=\"/contact\">\r\n                                <Nav.Link as={Link} to=\"/contact\" >Contact</Nav.Link>\r\n                            </NavItem>\r\n\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default SectionNavbar;","import React, {useState, useEffect} from 'react';\nimport {BrowserRouter} from 'react-router-dom';\nimport {fetchDataContact} from './Api';\n\nimport './App.css';\n\n//Import Components Fixed Website\nimport Navbar from './Components/navbar/';\n\nfunction App() {\n\n  const [state, setState] = useState({\n    data: {},\n    country: [],\n    blog: [],\n    faq: [],\n    setting: {},\n    websiteInfo: [],\n    countrie: '',\n  })\n\n  useEffect(() => {\n\n    fetchDataContact.apply().then(contact => {\n      setState(p => {\n        return {...p, setting: contact}\n      })\n    });\n\n}, []);\n\n  return (\n    <BrowserRouter>\n      <Navbar logo={state.setting.logo}/>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}